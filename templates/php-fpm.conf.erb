[global]
pid = <%= @php_fpm_socket_dir || '/var/run' %>/<%= @php_fpm_pid_file || 'php7.0-fpm.pid' %>
error_log = <%= node['php_fpm']['fpm_log_file'] %>
log_level = notice

; If this number of child processes exit with SIGSEGV or SIGBUS within the time
; interval set by emergency_restart_interval then FPM will restart. A value
; of '0' means 'Off'.
; Default Value: 0
emergency_restart_threshold = 15

; Interval of time used by emergency_restart_interval to determine when
; a graceful restart will be initiated.  This can be useful to work around
; accidental corruptions in an accelerator's shared memory.
; Available Units: s(econds), m(inutes), h(ours), or d(ays)
; Default Unit: seconds
; Default Value: 0
emergency_restart_interval = 30s

; Time limit for child processes to wait for a reaction on signals from master.
; Available units: s(econds), m(inutes), h(ours), or d(ays)
; Default Unit: seconds
; Default Value: 0
process_control_timeout = 10s

daemonize = yes

[www]

listen = <%= @php_fpm_socket_dir || '/var/run' %>/<%= @php_fpm_socket_file || 'php7.0-fpm.sock' %>
listen.backlog = -1

listen.owner = <%= node['php_fpm']['user'] %>
listen.group = <%= node['php_fpm']['group'] %>
listen.mode = 0666

user = <%= node['php_fpm']['user'] %>
group = <%= node['php_fpm']['group'] %>

pm = dynamic
pm.max_children = 100
pm.start_servers = 30
pm.min_spare_servers = 10
pm.max_spare_servers = 100
pm.max_requests = 500
pm.status_path = /fpm_status

ping.path = /fpm_ping
ping.response = p0ng

;request_terminate_timeout = 0
request_slowlog_timeout = 4

slowlog = <%= node['php_fpm']['slow_log_file'] %>

; Pass environment variables like LD_LIBRARY_PATH. All $VARIABLEs are taken from
; the current environment.
; Default Value: clean env
;env[HOSTNAME] = $HOSTNAME
;env[PATH] = /usr/local/bin:/usr/bin:/bin
;env[TMP] = /tmp
;env[TMPDIR] = /tmp
;env[TEMP] = /tmp

